<!DOCTYPE html>
<html>

	<head>
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<title>Winter Olymics Scoreboard</title>
		<link href="http://cdn.staticfile.org/emoji/0.2.2/emoji.css" rel="stylesheet" type="text/css" />
		<script src="http://cdn.staticfile.org/jquery/2.1.0/jquery.min.js"></script>
		<script src="http://cdn.staticfile.org/emoji/0.2.2/emoji.js"></script>
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
		<link rel="stylesheet" href="/css/main.css">
		<link rel="icon" href="/favicon.ico" type="image/x-icon">
		<style>

		</style>
	</head>

	<body>
		<div class="header-image">
			<div class="container h-100 d-flex flex-column">
				<p class="text-white m-0 mt-auto">RCY Showdown</p>
				<h1 class="text-white">Leaderboard</h1>
			</div>
		</div>
		<div class="container mb-4" id="scoreboard">
			{{cards}}
		</div>
		<script src="/socket.io/socket.io.js"></script>
		<script>
			const teams = [
				{ id: 'team1', name: 'Titans ðŸŸ£' },
				{ id: 'team2', name: 'Jets ðŸ©·' },
				{ id: 'team3', name: 'Falcons ðŸŸ ' },
				{ id: 'team4', name: 'Mavericks ðŸ©µ' }
			];

			function generateCards(scores) {
				let cards = '';

				const teamScores = teams.map(team => ({ team: team.id, score: scores[team.id] }));
				teamScores.sort((a, b) => b.score - a.score);

				teamScores.forEach((team, index) => {
					const position = index < 3 ? ['ðŸ¥‡', 'ðŸ¥ˆ', 'ðŸ¥‰'][index] : `${index + 1}.`;
					const card = `
						<div class="card mt-2" data-team="${team.team}">
							<div class="card-body d-flex flex-row justify-content-between">
								<div class="d-flex flex-row">
									<p class="mb-0">${position}</p>
									<p class="mb-0 ms-2">${teams.find(t => t.id === team.team).name}</p>
								</div>
								<p class="team-score text-end mb-0" id="${team.team}-score">${team.score}</p>
							</div>
						</div>
					`;
					cards += card;
				});

				return cards;
			}

			function updateScores(scores) {
				const scoreboardContainer = document.getElementById('scoreboard');
				const cards = generateCards(scores);
				scoreboardContainer.innerHTML = cards;
			}

			function fetchScores() {
				fetch('/scores')
					.then(response => response.json())
					.then(scores => {
						updateScores(scores);
					})
					.catch(error => console.error('Error:', error));
			}

			const socket = io();
			socket.on('score-update', scores => {
				updateScores(scores);
			});

			window.onload = function () {
				fetchScores();
			};
		</script>
	</body>

</html>